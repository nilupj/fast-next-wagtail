"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./utils/api.js":
/*!**********************!*\
  !*** ./utils/api.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSymptoms: () => (/* binding */ checkSymptoms),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchArticle: () => (/* binding */ fetchArticle),\n/* harmony export */   fetchArticlePaths: () => (/* binding */ fetchArticlePaths),\n/* harmony export */   fetchCondition: () => (/* binding */ fetchCondition),\n/* harmony export */   fetchConditionPaths: () => (/* binding */ fetchConditionPaths),\n/* harmony export */   fetchConditionsIndex: () => (/* binding */ fetchConditionsIndex),\n/* harmony export */   fetchDrugDetails: () => (/* binding */ fetchDrugDetails),\n/* harmony export */   fetchDrugsIndex: () => (/* binding */ fetchDrugsIndex),\n/* harmony export */   fetchHealthTopics: () => (/* binding */ fetchHealthTopics),\n/* harmony export */   fetchLatestNews: () => (/* binding */ fetchLatestNews),\n/* harmony export */   fetchNewsBySlug: () => (/* binding */ fetchNewsBySlug),\n/* harmony export */   fetchRelatedArticles: () => (/* binding */ fetchRelatedArticles),\n/* harmony export */   fetchTopStories: () => (/* binding */ fetchTopStories),\n/* harmony export */   fetchWellBeingArticles: () => (/* binding */ fetchWellBeingArticles),\n/* harmony export */   getDrugBySlug: () => (/* binding */ getDrugBySlug),\n/* harmony export */   getDrugs: () => (/* binding */ getDrugs),\n/* harmony export */   getLatestNews: () => (/* binding */ getLatestNews),\n/* harmony export */   searchContent: () => (/* binding */ searchContent),\n/* harmony export */   searchDrugs: () => (/* binding */ searchDrugs)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(pages-dir-browser)/../node_modules/axios/index.js\");\n\nconst API_URL = \"http://localhost:8001\" || 0;\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_URL,\n    paramsSerializer: {\n        encode: (param)=>encodeURIComponent(param)\n    },\n    timeout: 10000,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n// Add language interceptor with isServer check\napi.interceptors.request.use((config)=>{\n    if (true) {\n        const lang = localStorage.getItem('language') || 'en';\n        config.params = {\n            ...config.params,\n            lang\n        };\n    }\n    return config;\n});\napi.interceptors.response.use((response)=>response, (error)=>{\n    if (error.response) {\n        console.error('API error:', error.response.data);\n    } else if (error.request) {\n        console.error('No response received:', error.request);\n    } else {\n        console.error('Error setting up request:', error.message);\n    }\n    return Promise.reject(error);\n});\n// Top stories\nconst fetchTopStories = async ()=>{\n    try {\n        const response = await api.get('/api/articles/top-stories');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching top stories:', error);\n        return [];\n    }\n};\n// Health topics\nconst fetchHealthTopics = async ()=>{\n    try {\n        const response = await api.get('/api/articles/health-topics');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching health topics:', error);\n        return [];\n    }\n};\n// Conditions index (A-Z)\nconst fetchConditionsIndex = async ()=>{\n    try {\n        const response = await api.get('/api/conditions/index');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching conditions index:', error);\n        return [];\n    }\n};\n// Condition paths for static generation\nconst fetchConditionPaths = async ()=>{\n    try {\n        const response = await api.get('/api/conditions/paths');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching condition paths:', error);\n        return [];\n    }\n};\n// Single condition details\nconst fetchCondition = async function(slug) {\n    let lang = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'en';\n    try {\n        const path = lang === 'hi' ? \"/api/conditions/hi/\".concat(slug) : \"/api/conditions/\".concat(slug);\n        const response = await api.get(path, {\n            params: {\n                lang\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching condition \".concat(slug, \":\"), error);\n        return null;\n    }\n};\n// Article paths for static generation\nconst fetchArticlePaths = async ()=>{\n    try {\n        const response = await api.get('/api/articles/paths');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching article paths:', error);\n        return [];\n    }\n};\n// Single article details\nconst fetchArticle = async (slug, lang)=>{\n    try {\n        const encodedSlug = encodeURIComponent(slug);\n        const currentLang = lang || ( true ? localStorage.getItem('language') || 'en' : 0);\n        const response = await api.get(\"/api/articles/\".concat(encodedSlug), {\n            params: {\n                lang: currentLang\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching article \".concat(slug, \":\"), error);\n        return null;\n    }\n};\n// Related articles\nconst fetchRelatedArticles = async (slug)=>{\n    try {\n        const response = await api.get(\"/api/articles/\".concat(slug, \"/related\"));\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching related articles for \".concat(slug, \":\"), error);\n        return [];\n    }\n};\n// Drugs index (A-Z)\nconst fetchDrugsIndex = async ()=>{\n    try {\n        const response = await api.get('/api/drugs/index');\n        const data = response.data;\n        return data.map((drug)=>({\n                id: drug.id,\n                title: drug.title,\n                meta: drug.meta,\n                generic_name: drug.generic_name,\n                brand_names: drug.brand_names,\n                drug_class: drug_class\n            }));\n    } catch (error) {\n        console.error('Error fetching drugs index:', error);\n        throw error;\n    }\n};\n// Fetch drug details\nconst fetchDrugDetails = async (slug)=>{\n    try {\n        const response = await api.get(\"/api/drugs/\".concat(slug, \"/\"));\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching drug details:', error);\n        throw error;\n    }\n};\n// Well-being articles\nconst fetchWellBeingArticles = async ()=>{\n    try {\n        const response = await api.get('/api/well-being');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching well-being articles:', error);\n        return {\n            featured: [],\n            articles: []\n        };\n    }\n};\n// Search\nconst searchContent = async (query)=>{\n    if (!query || query.trim().length === 0) {\n        return {\n            articles: [],\n            conditions: [],\n            drugs: []\n        };\n    }\n    try {\n        const response = await api.get(\"/api/search/\", {\n            params: {\n                q: query.trim(),\n                lang:  true ? localStorage.getItem('locale') || 'en' : 0\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error searching content:', error);\n        throw error;\n    }\n};\n// Symptom checker\nconst checkSymptoms = async (data)=>{\n    try {\n        const response = await api.post('/api/symptom-checker/', data);\n        return response.data;\n    } catch (error) {\n        console.error('Error checking symptoms:', error);\n        throw error;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\nasync function searchDrugs(query) {\n    try {\n        const response = await fetch(\"\".concat(CMS_API_URL, \"/drugs/search/?q=\").concat(encodeURIComponent(query)));\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error searching drugs:', error);\n        return [];\n    }\n}\n// Add your API endpoints here\nconst getDrugs = async ()=>{\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get('/api/drugs/index');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching drugs:', error);\n        throw error;\n    }\n};\nconst getDrugBySlug = async (slug)=>{\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(\"http://localhost:8001\", \"/api/drugs/\").concat(slug));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching drug:\", error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to fetch drug information\");\n    }\n};\n// News endpoints\nconst fetchLatestNews = async ()=>{\n    try {\n        const response = await api.get('/api/news/latest');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching latest news:', error);\n        return [];\n    }\n};\nconst fetchNewsBySlug = async (slug)=>{\n    try {\n        const response = await api.get(\"/api/news/\".concat(slug));\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching news article:', error);\n        return null;\n    }\n};\nconst getLatestNews = async ()=>{\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get('/api/news/latest');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching latest news:', error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/api.js\n"));

/***/ })

});